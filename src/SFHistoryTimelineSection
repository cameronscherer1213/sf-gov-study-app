import React, { useState, useEffect } from 'react';

// Custom hook for drag-and-drop functionality
const useDraggable = (items, setItems) => {
  const [draggedItem, setDraggedItem] = useState(null);
  const [draggedOverItem, setDraggedOverItem] = useState(null);

  const handleDragStart = (e, index) => {
    setDraggedItem(index);
    // This is needed for Firefox to enable dragging
    e.dataTransfer.effectAllowed = "move";
    e.dataTransfer.setData("text/html", e.target.parentNode);
  };

  const handleDragOver = (e, index) => {
    e.preventDefault();
    setDraggedOverItem(index);
    e.dataTransfer.dropEffect = "move";
  };

  const handleDrop = (e, index) => {
    e.preventDefault();
    const newItems = [...items];
    const draggedItemContent = newItems[draggedItem];
    
    // Remove the dragged item
    newItems.splice(draggedItem, 1);
    // Insert it at the new position
    newItems.splice(index, 0, draggedItemContent);
    
    setItems(newItems);
    // Reset
    setDraggedItem(null);
    setDraggedOverItem(null);
  };

  const handleDragEnd = () => {
    setDraggedItem(null);
    setDraggedOverItem(null);
  };

  return {
    draggedItem,
    draggedOverItem,
    handleDragStart,
    handleDragOver,
    handleDrop,
    handleDragEnd
  };
};

const SFChronologyQuiz = () => {
  const historyData = [
    {
      year: 1849,
      event: "California Constitution adopted",
      type: "Constitutional Structure",
      notes: "Coincided with the Gold Rush. Immediately followed the Treaty of Guadalupe Hidalgo in 1848, which granted California territory to U.S."
    },
    {
      year: 1850,
      event: "California State Legislature established",
      type: "Constitutional Structure",
      notes: "San Francisco County and San Francisco City established as separate entities."
    },
    {
      year: 1856,
      event: "San Francisco County and City consolidated",
      type: "Constitutional Structure",
      notes: "Followed a period of chaos and corruption. Consolidation Act meant to streamline coordination between city and county government. It also created San Mateo County, which was speculated to be a haven for criminals."
    },
    {
      year: 1879,
      event: "Second California Constitution adopted (revision)",
      type: "Constitutional Structure",
      notes: "Major rewrite of entire Constitution. This document is now our active Constitution, though amendments have been added. Article 11 opens the door for local governments to take on home power."
    },
    {
      year: 1898,
      event: "First San Francisco Charter adopted",
      type: "Constitutional Structure",
      notes: "Until this point, San Francisco had been governed by state statute. This followed a Gilded Age period of big business and limited government capacity. The forthcoming Progressive Era would see governments take on a bigger role in stamping out corruption, and a greater influence of party bosses."
    },
    {
      year: 1917,
      event: "San Francisco Planning Commission created",
      type: "Land Use",
      notes: "Advisory body only."
    },
    {
      year: 1921,
      event: "San Francisco Zoning Ordinance adopted",
      type: "Land Use",
      notes: "First full plan for San Francisco as opposed to ad hoc designations, but primitive relative to today's planning code."
    },
    {
      year: 1932,
      event: "Second San Francisco Charter adopted (revision)",
      type: "Constitutional Structure",
      notes: "Introduces Chief Administrative Officer to split out responsibilities of executive, in part to reduce corruption."
    },
    {
      year: 1942,
      event: "San Francisco Planning Department created",
      type: "Land Use",
      notes: "Culmination of Progressive Era of big government. Provided human capital for implementing land use plan."
    },
    {
      year: 1945,
      event: "First General Plan adopted",
      type: "Land Use",
      notes: ""
    },
    {
      year: 1960,
      event: "Second San Francisco Zoning Ordinance codified",
      type: "Land Use",
      notes: "Born out of the activism in response to urban renewal to block construction of new highways. Represented a reining in of government power and a rise of community input."
    },
    {
      year: 1970,
      event: "California Environmental Quality Act enacted",
      type: "Land Use",
      notes: ""
    },
    {
      year: 1996,
      event: "Third San Francisco Charter adopted (revision)",
      type: "Constitutional Structure",
      notes: "In response to inefficiencies resulting from split executive model, introduced \"strong mayor\" model. Strength of mayor has diminished over time, with authority shifting to BoS via amendments. Revision first put on ballot in 1980."
    }
  ];

  // State for the randomly ordered events that the user will sort
  const [shuffledEvents, setShuffledEvents] = useState([]);
  // State to track which items are in the correct position
  const [correctPositions, setCorrectPositions] = useState([]);
  // State to track whether answers are revealed
  const [answersRevealed, setAnswersRevealed] = useState(false);
  // State to track quiz completion
  const [allCorrect, setAllCorrect] = useState(false);
  // State to show/hide years as hints
  const [showYears, setShowYears] = useState(false);

  // Initialize the quiz with shuffled events
  useEffect(() => {
    shuffleEvents();
  }, []);

  // Function to shuffle the events
  const shuffleEvents = () => {
    const eventsOnly = historyData.map((item, index) => ({
      id: index,
      event: item.event,
      year: item.year,
      type: item.type,
      notes: item.notes
    }));
    
    // Sort by year (chronological order) to establish correct order
    const sortedByYear = [...eventsOnly].sort((a, b) => a.year - b.year);
    
    // Get the correct order of IDs
    const correctOrder = sortedByYear.map(item => item.id);
    
    // Shuffle events randomly
    const shuffled = [...eventsOnly].sort(() => Math.random() - 0.5);
    
    setShuffledEvents(shuffled);
    setCorrectPositions(Array(shuffled.length).fill(false));
    setAnswersRevealed(false);
    setAllCorrect(false);
    setShowYears(false);
  };

  // Set up drag and drop functionality
  const {
    draggedItem,
    draggedOverItem,
    handleDragStart,
    handleDragOver,
    handleDrop,
    handleDragEnd
  } = useDraggable(shuffledEvents, (newList) => {
    setShuffledEvents(newList);
    // Reset correct positions when items are moved
    setCorrectPositions(Array(newList.length).fill(false));
    setAllCorrect(false);
  });
  
  // Toggle showing years
  const toggleYears = () => {
    setShowYears(!showYears);
  };

  // Check the user's sequence against the correct chronological order
  const checkSequence = () => {
    // Get the chronologically sorted events (the correct order)
    const correctOrder = [...historyData].sort((a, b) => a.year - b.year).map(item => item.event);
    
    // Check each position
    const positionChecks = shuffledEvents.map((item, index) => {
      return item.event === correctOrder[index];
    });
    
    setCorrectPositions(positionChecks);
    
    // Check if all positions are correct
    const isAllCorrect = positionChecks.every(isCorrect => isCorrect);
    setAllCorrect(isAllCorrect);
  };

  // Reveal the correct answers
  const revealAnswers = () => {
    // Sort the events by year
    const sortedEvents = [...shuffledEvents].sort((a, b) => a.year - b.year);
    setShuffledEvents(sortedEvents);
    setCorrectPositions(Array(sortedEvents.length).fill(true));
    setAnswersRevealed(true);
    setAllCorrect(true);
  };

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-2 text-center">San Francisco Government Chronology Quiz</h1>
      <p className="text-center mb-6">Arrange the events in chronological order (earliest to latest)</p>
      
      <div className="flex justify-center gap-3 mb-6">
        <button
          className={`px-4 py-2 rounded ${showYears ? 'bg-blue-100 text-blue-800 border border-blue-300' : 'bg-gray-200 hover:bg-gray-300'}`}
          onClick={toggleYears}
        >
          {showYears ? 'Hide Years' : 'Show Years as Hint'}
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        {shuffledEvents.map((item, index) => (
          <div 
            key={item.id} 
            className={`p-3 mb-2 rounded flex items-center border cursor-move ${
              correctPositions[index] 
                ? 'bg-green-50 border-green-200' 
                : correctPositions[index] === false && correctPositions.some(pos => pos === true)
                  ? 'bg-red-50 border-red-200'
                  : 'bg-white border-gray-200'
            } ${draggedItem === index ? 'opacity-50' : ''} ${draggedOverItem === index ? 'border-blue-500 border-2' : ''}`}
            draggable={!answersRevealed}
            onDragStart={(e) => handleDragStart(e, index)}
            onDragOver={(e) => handleDragOver(e, index)}
            onDrop={(e) => handleDrop(e, index)}
            onDragEnd={handleDragEnd}
          >
            {showYears && (
              <div className="mr-2 font-bold text-blue-600 w-16 text-center">
                {item.year}
              </div>
            )}
            <div className="mr-2 font-semibold w-8 h-8 flex items-center justify-center rounded-full bg-gray-200">
              {index + 1}
            </div>
            <div className="flex-grow">
              <div className="font-medium">{item.event}</div>
              <div className="text-sm text-gray-500">{item.type}</div>
            </div>
            <div className="ml-2 text-gray-400">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </div>
          </div>
        ))}
        
        {allCorrect && (
          <div className="mt-4 p-3 bg-green-100 text-green-800 rounded border border-green-200">
            🎉 Congratulations! All events are in the correct chronological order.
          </div>
        )}
      </div>
      
      <div className="flex justify-center gap-4">
        <button
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400"
          onClick={checkSequence}
          disabled={answersRevealed}
        >
          Check Sequence
        </button>
        
        <button
          className="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 disabled:bg-gray-400"
          onClick={revealAnswers}
          disabled={answersRevealed}
        >
          Reveal Correct Order
        </button>
        
        <button
          className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
          onClick={shuffleEvents}
        >
          Reset Quiz
        </button>
      </div>
      
      {answersRevealed && (
        <div className="mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
          <h3 className="font-bold mb-2 text-center">Correct Chronological Order:</h3>
          <ol className="list-decimal pl-5">
            {shuffledEvents.map((item) => (
              <li key={item.id} className="mb-1">
                <span className="font-medium">{item.event}</span> ({item.year})
              </li>
            ))}
          </ol>
        </div>
      )}
    </div>
  );
};

export default SFChronologyQuiz;
